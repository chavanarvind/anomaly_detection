import tensorflow as tf

# Assuming data is scaled
n_lags = 3  # Number of timesteps to look back
X = []
y = []

# Create lagged data
for i in range(n_lags, len(data)):
    X.append(data.iloc[i-n_lags:i].values)
    y.append(data.iloc[i].values)

X = np.array(X)
y = np.array(y)

# Split data into train and test
train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Define LSTM model
model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])),
    tf.keras.layers.Dense(X_train.shape[2])  # Output for all columns
])

model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Forecast
predictions = model.predict(X_test)
